{{ config(materialized=env_var("DBT_MAT_VIEW"), tags=["sales","pricing","uber"]) }}


with 
cte_sls_wtx_forecast_fact as (select * from {{ ref('fct_wbx_sls_ibe_forecast') }}),
cte_sls_wtx_fc_snapshot_dim as (select * from {{ ref('dim_wbx_fc_snapshot') }}),
cte_EXC_Fact_Account_Plan_Actual as (select * from {{ ref('src_exc_fact_account_plan_actual') }}),
cte_EXC_Fact_Account_Plan as (select * from {{ ref('src_exc_fact_account_plan') }}),
cte_exc_dim_scenario as (select * from {{ ref('src_exc_dim_scenario') }}),
cte_exc_dim_pc_customer as (select * from {{ ref('src_exc_dim_pc_customer') }}),
cte_exc_dim_pc_product as (select * from {{ ref('src_exc_dim_pc_product') }}),
--changed from src_sls_wtx_lkp_snapshot_date to stg_d_wtx_lkp_snapshot_date
cte_SLS_WTX_LKP_SNAPSHOT_DATE as (select * from {{ ref('stg_d_wtx_lkp_snapshot_date') }}),
cte_sls_wtx_slsorder_fact as (select * from {{ ref('fct_wbx_sls_order') }}),
cte_customer_ext as (select * from {{ ref('dim_wbx_customer_ext') }}),
cte_sls_wtx_budget_fact as (select * from {{ ref('fct_wbx_sls_ibe_budget') }}),
cte_sls_wtx_budget_scen_xref as (select * from {{ ref('src_sls_wtx_budget_scen_xref') }}), --EI_RDM.sls_wtx_budget_scen_xref 
cte_DIM_DATE as (select * from {{ ref('src_dim_date') }}),
cte_planning_date_oc as (select * from {{ ref('dim_wbx_planning_date_oc') }}),
cte_item_ext as (select * from {{ ref('dim_wbx_item_ext') }}),
cte_v_sls_wtx_onpromo as --logic of the view POSTSNOWP.EI_RDM.V_SLS_WTX_ONPROMO
(
    SELECT distinct TRIM(CUST.CODE) AS CUSTOMER, TRIM(PROD.CODE) AS SOURCE_ITEM_IDENTIFIER, date_trunc('WEEK', TO_DATE(TO_CHAR(FACT.DAY_IDX),'YYYYMMDD')+1)-1 DATE
FROM 
(SELECT * FROM cte_EXC_Fact_Account_Plan_Actual WHERE 
  date_trunc('WEEK', TO_DATE(TO_CHAR(DAY_IDX),'YYYYMMDD')+1)-1 <=DATE_TRUNC('WEEK', CURRENT_DATE)-1
 UNION
 SELECT * FROM cte_EXC_Fact_Account_Plan WHERE
 date_trunc('WEEK', TO_DATE(TO_CHAR(DAY_IDX),'YYYYMMDD')+1)-1 <=DATE_TRUNC('WEEK', CURRENT_DATE)-1) FACT
LEFT OUTER JOIN cte_exc_dim_scenario SCEN
ON FACT.SCEN_IDX = SCEN.SCEN_IDX
LEFT OUTER JOIN cte_exc_dim_pc_customer CUST
ON FACT.CUST_IDX = CUST.IDX
LEFT OUTER JOIN cte_exc_dim_pc_product  PROD
ON FACT.SKU_IDX = PROD.IDX
WHERE SCEN.SCEN_IDX=1
AND FACT.ISONPROMO_SI=TRUE
),
cte_v_wtx_cust_planning as
 (
    SELECT * from {{ ref('dim_wbx_cust_planning') }}
 ),
cte_final as 
(
    SELECT 
  FACT.SOURCE_SYSTEM,
  --FACT.COMPANY_CODE,
  SOURCE_ITEM_IDENTIFIER,
  SOURCE_CONTENT_FILTER,
  SHIP_SOURCE_CUSTOMER_CODE,
  BILL_SOURCE_CUSTOMER_CODE,
  COALESCE(FACT.PLAN_SOURCE_CUSTOMER_CODE, CUST_EXT.TRADE_TYPE_CODE) AS PLAN_SOURCE_CUSTOMER_CODE,
  COALESCE(CUST_EXT.MARKET_DESC, PLAN.MARKET) AS MARKET_DESC,
  COALESCE(CUST_EXT.SUB_MARKET_DESC, PLAN.SUB_MARKET) AS SUB_MARKET_DESC,
  COALESCE(CUST_EXT.TRADE_CLASS_DESC, PLAN.TRADE_CLASS) AS TRADE_CLASS_DESC,
  COALESCE(CUST_EXT.TRADE_GROUP_DESC, PLAN.TRADE_GROUP) AS TRADE_GROUP_DESC,
  COALESCE(CUST_EXT.TRADE_TYPE_DESC, PLAN.TRADE_TYPE) AS TRADE_TYPE_DESC,
  COALESCE(CUST_EXT.TRADE_SECTOR_DESC, PLAN.TRADE_SECTOR_DESC) AS TRADE_SECTOR_DESC,
  FACT.CALENDAR_DATE,
  LINE_ACTUAL_SHIP_DATE,
  LINE_SCH_PICK_UP_DATE, 
  LINE_STATUS_CODE,
  LINE_STATUS_DESC,
  COST_CENTRE,
  SNAPSHOT_FORECAST_DATE,
  OVERRIDE_FLAG,
  ISONPROMO_SI,
  ISONPROMO_SO,
  ITM_EXT.DESCRIPTION AS ITEM_DESCRIPTION,
  ITM_EXT.ITEM_TYPE AS ITEM_TYPE, 
  ITM_EXT.BRANDING_DESC AS BRANDING_DESC, 
  ITM_EXT.PRODUCT_CLASS_DESC AS PRODUCT_CLASS_DESC, 
  ITM_EXT.SUB_PRODUCT_DESC AS SUB_PRODUCT_DESC, 
  ITM_EXT.STRATEGIC_DESC AS STRATEGIC_DESC, 
  ITM_EXT.POWER_BRAND_DESC AS POWER_BRAND_DESC, 
  ITM_EXT.MANUFACTURING_GROUP_DESC AS MANUFACTURING_GROUP_DESC, 
  ITM_EXT.CATEGORY_DESC AS CATEGORY_DESC, 
  ITM_EXT.PACK_SIZE_DESC AS PACK_SIZE_DESC, 
  ITM_EXT.SUB_CATEGORY_DESC AS SUB_CATEGORY_DESC, 
  ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS AS CONSUMER_UNITS_IN_TRADE_UNITS,
  ITM_EXT.CONSUMER_UNITS AS CONSUMER_UNITS,
  SUM(FCF_TOT_VOL_KG) FCF_TOT_VOL_KG,
  SUM(FCF_TOT_VOL_CA) FCF_TOT_VOL_CA,
  SUM(FCF_TOT_VOL_UL) FCF_TOT_VOL_UL,
  SUM((FACT.FCF_TOT_VOL_CA * ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS)) AS FCF_TOT_VOL_PK,
  SUM((FACT.FCF_TOT_VOL_CA * ITM_EXT.CONSUMER_UNITS)) AS FCF_TOT_VOL_CU,
  SUM(FCF_BASE_VOL_KG) FCF_BASE_VOL_KG,
  SUM(FCF_BASE_VOL_CA) FCF_BASE_VOL_CA,
  SUM(FCF_BASE_VOL_UL) FCF_BASE_VOL_UL,
  SUM((FACT.FCF_BASE_VOL_CA * ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS)) AS FCF_BASE_VOL_PK,
  SUM((FACT.FCF_BASE_VOL_CA * ITM_EXT.CONSUMER_UNITS)) AS FCF_BASE_VOL_CU,
  SUM(FCF_PROMO_VOL_KG) FCF_PROMO_VOL_KG,
  SUM(FCF_PROMO_VOL_CA) FCF_PROMO_VOL_CA,
  SUM(FCF_PROMO_VOL_UL) FCF_PROMO_VOL_UL,
  SUM((FACT.FCF_PROMO_VOL_CA * ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS)) AS FCF_PROMO_VOL_PK,
  SUM((FACT.FCF_PROMO_VOL_CA * ITM_EXT.CONSUMER_UNITS)) AS FCF_PROMO_VOL_CU,
  SUM(FCF_OVER_VOL_KG) FCF_OVER_VOL_KG,
  SUM(FCF_OVER_VOL_CA) FCF_OVER_VOL_CA,
  SUM(FCF_OVER_VOL_UL) FCF_OVER_VOL_UL,
  SUM((FACT.FCF_OVER_VOL_CA * ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS)) AS FCF_OVER_VOL_PK,
  SUM((FACT.FCF_OVER_VOL_CA * ITM_EXT.CONSUMER_UNITS)) AS FCF_OVER_VOL_CU,
  SUM(FCF_TOT_ORIG_VOL_KG) FCF_TOT_ORIG_VOL_KG,
  SUM(FCF_TOT_ORIG_VOL_CA) FCF_TOT_ORIG_VOL_CA,
  SUM(FCF_TOT_ORIG_VOL_UL) FCF_TOT_ORIG_VOL_UL, 
  SUM((FACT.FCF_TOT_ORIG_VOL_CA * ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS)) AS FCF_TOT_ORIG_VOL_PK,
  SUM((FACT.FCF_TOT_ORIG_VOL_CA * ITM_EXT.CONSUMER_UNITS)) AS FCF_TOT_ORIG_VOL_CU,
  SUM(ORDERED_CA_QUANTITY) ORDERED_CA_QUANTITY,
  SUM(ORDERED_KG_QUANTITY) ORDERED_KG_QUANTITY,
  SUM(ORDERED_UL_QUANTITY) ORDERED_UL_QUANTITY,
  SUM((FACT.ORDERED_CA_QUANTITY* ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS)) AS ORDERED_PK_QUANTITY,
  SUM((FACT.ORDERED_CA_QUANTITY* ITM_EXT.CONSUMER_UNITS)) AS ORDERED_CU_QUANTITY,
  SUM(SHIPPED_UL_QUANTITY) SHIPPED_UL_QUANTITY,
  SUM((FACT.SHIPPED_UL_QUANTITY* ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS)) AS SHIPPED_PK_QUANTITY,
  SUM((FACT.SHIPPED_UL_QUANTITY* ITM_EXT.CONSUMER_UNITS)) AS SHIPPED_CU_QUANTITY,
  SUM(SHIPPED_CA_QUANTITY) SHIPPED_CA_QUANTITY,
  SUM(SHIPPED_KG_QUANTITY) SHIPPED_KG_QUANTITY,
  FROZEN_FORECAST,
  FROZEN_FORECAST_DELINEATION_DATE,
  SUM(BUDGET_AMOUNT) BUDGET_AMOUNT,
  SUM(BUDGET_BOUGHTIN_AMT) BUDGET_BOUGHTIN_AMT,
  SUM(BUDGET_CA_QUANTITY) BUDGET_CA_QUANTITY,
  SUM(BUDGET_COPACK_AMT) BUDGET_COPACK_AMT,
  SUM(BUDGET_ING_AMT) BUDGET_ING_AMT,
  SUM(BUDGET_KG_QUANTITY) BUDGET_KG_QUANTITY,
  SUM(BUDGET_LBR_AMT) BUDGET_LBR_AMT,
  SUM(BUDGET_OTH_AMT) BUDGET_OTH_AMT,
  SUM(BUDGET_PERMD_BK_MRG) BUDGET_PERMD_BK_MRG,
  SUM(BUDGET_PERMD_CSH_DISC) BUDGET_PERMD_CSH_DISC,
  SUM(BUDGET_PERMD_EDLP) BUDGET_PERMD_EDLP,
  SUM(BUDGET_PERMD_RNG_SPT) BUDGET_PERMD_RNG_SPT,
  SUM(BUDGET_PERMD_RSA_INCT) BUDGET_PERMD_RSA_INCT,
  SUM(BUDGET_PKG_AMT) BUDGET_PKG_AMT,
  SUM(BUDGET_TRADE_AG_CST) BUDGET_TRADE_AG_CST,
  SUM(BUDGET_TRADE_AVP) BUDGET_TRADE_AVP,
  SUM(BUDGET_TRADE_CUST_MKT) BUDGET_TRADE_CUST_MKT,
  SUM(BUDGET_TRADE_ISA) BUDGET_TRADE_ISA,
  SUM(BUDGET_TRADE_OTHER) BUDGET_TRADE_OTHER,
  SUM(BUDGET_TRADE_PROMO) BUDGET_TRADE_PROMO,
  SUM(BUDGET_UL_QUANTITY) BUDGET_UL_QUANTITY,
  SUM((FACT.BUDGET_QTY_CA * ITM_EXT.CONSUMER_UNITS)) AS BUDGET_CU_QUANTITY, //Added by Carl
  SUM((FACT.BUDGET_QTY_CA * ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS)) AS BUDGET_PK_QUANTITY, //Added by Carl
  ISONPROMO_ACT,
  COALESCE(BUDGET_WEEK,DT.CALENDAR_YEAR_WEEK_NO) AS BUDGET_WEEK,
  ISONPROMO_FCST
  FROM
  (

  /* UNION 1 : FORECAST */
  
 SELECT
  FORECAST_FACT.SOURCE_SYSTEM,
  NULL AS COMPANY_CODE,
  FORECAST_FACT.SOURCE_ITEM_IDENTIFIER,
  'FORECAST' AS SOURCE_CONTENT_FILTER,
  FORECAST_FACT.ITEM_GUID,
  NULL AS SHIP_SOURCE_CUSTOMER_CODE,
  NULL AS SHIP_CUSTOMER_ADDRESS_GUID,
  NULL AS BILL_SOURCE_CUSTOMER_CODE,
  FORECAST_FACT.PLAN_SOURCE_CUSTOMER_CODE,
  FORECAST_FACT.CALENDAR_DATE,
  NULL AS LINE_ACTUAL_SHIP_DATE,
  NULL AS LINE_SCH_PICK_UP_DATE, 
  NULL AS LINE_STATUS_CODE,
  NULL AS LINE_STATUS_DESC,
  NULL AS COST_CENTRE,
  FORECAST_FACT.SNAPSHOT_DATE AS SNAPSHOT_FORECAST_DATE,
  '0' AS OVERRIDE_FLAG,
  FORECAST_FACT.ISONPROMO_SI,
  FORECAST_FACT.ISONPROMO_SO,
  FORECAST_FACT.FCF_TOT_VOL_KG,
  FORECAST_FACT.FCF_TOT_VOL_CA,
  FORECAST_FACT.FCF_TOT_VOL_UL,
  FORECAST_FACT.FCF_BASE_VOL_KG,
  FORECAST_FACT.FCF_BASE_VOL_CA,
  FORECAST_FACT.FCF_BASE_VOL_UL,
  FORECAST_FACT.FCF_PROMO_VOL_KG,
  FORECAST_FACT.FCF_PROMO_VOL_CA,
  FORECAST_FACT.FCF_PROMO_VOL_UL,
  FORECAST_FACT.FCF_OVER_VOL_KG,
  FORECAST_FACT.FCF_OVER_VOL_CA,
  FORECAST_FACT.FCF_OVER_VOL_UL,
  FORECAST_FACT.FCF_TOT_VOL_KG AS FCF_TOT_ORIG_VOL_KG,
  FORECAST_FACT.FCF_TOT_VOL_CA AS FCF_TOT_ORIG_VOL_CA,
  FORECAST_FACT.FCF_TOT_VOL_UL AS FCF_TOT_ORIG_VOL_UL,  
  0 AS ORDERED_CA_QUANTITY,
  0 AS ORDERED_KG_QUANTITY,
  0 AS ORDERED_UL_QUANTITY,
  0 AS SHIPPED_UL_QUANTITY, 
  0 AS SHIPPED_CA_QUANTITY,  
  0 AS SHIPPED_KG_QUANTITY,
  'DAILY' AS FROZEN_FORECAST,
  NULL AS FROZEN_FORECAST_DELINEATION_DATE,
  NULL AS BUDGET_AMOUNT,
  NULL AS BUDGET_BOUGHTIN_AMT,
  NULL AS BUDGET_CA_QUANTITY,
  NULL AS BUDGET_COPACK_AMT,
  NULL AS BUDGET_ING_AMT	,
  NULL AS BUDGET_KG_QUANTITY,
  NULL AS BUDGET_LBR_AMT,
  NULL AS BUDGET_OTH_AMT,
  NULL AS BUDGET_PERMD_BK_MRG,
  NULL AS BUDGET_PERMD_CSH_DISC,
  NULL AS BUDGET_PERMD_EDLP ,
  NULL AS BUDGET_PERMD_RNG_SPT,
  NULL AS BUDGET_PERMD_RSA_INCT,
  NULL AS BUDGET_PKG_AMT,
  NULL AS BUDGET_TRADE_AG_CST,
  NULL AS BUDGET_TRADE_AVP,
  NULL AS BUDGET_TRADE_CUST_MKT ,
  NULL AS BUDGET_TRADE_ISA,
  NULL AS BUDGET_TRADE_OTHER,
  NULL AS BUDGET_TRADE_PROMO,
  NULL AS BUDGET_UL_QUANTITY,
  NULL AS BUDGET_QTY_CA,
  NULL AS ISONPROMO_ACT,
  NULL AS BUDGET_WEEK,
  (CASE WHEN FPRM.CUSTOMER IS NULL THEN '0' ELSE '1' END) AS ISONPROMO_FCST
  FROM cte_sls_wtx_forecast_fact FORECAST_FACT

      LEFT JOIN (SELECT *, RANK () OVER (PARTITION BY SOURCE_SYSTEM,SNAPSHOT_DATE,SNAPSHOT_MODEL,SNAPSHOT_CODE
      ORDER BY SNAPSHOT_TYPE ASC ) RANK_NO 
      FROM cte_sls_wtx_fc_snapshot_dim) D
      ON FORECAST_FACT.SNAPSHOT_DATE = D.SNAPSHOT_DATE
      AND D.RANK_NO = 1 
 
  LEFT JOIN cte_v_sls_wtx_onpromo FPRM
  on FPRM.customer = FORECAST_FACT.PLAN_SOURCE_CUSTOMER_CODE
  and FPRM.source_item_identifier = FORECAST_FACT.SOURCE_ITEM_IDENTIFIER
  and FPRM.date = DATEADD('DAY', -1, DATE_TRUNC('WEEK', DATEADD('DAY', 1, FORECAST_FACT.CALENDAR_DATE))) 
  //want to join on every day in the week that a promotion is running.  Adjusted the week to Sunday to align weeks.
      
  WHERE FORECAST_FACT.SNAPSHOT_DATE = (select snapshot_Date from (
select *,rank() over (order by snapshot_Date desc) rnknum from cte_SLS_WTX_LKP_SNAPSHOT_DATE ) where rnknum=1 )
  
  OR (D.SNAPSHOT_TYPE = 'MONTH_END' AND FORECAST_FACT.SNAPSHOT_DATE BETWEEN CURRENT_DATE - 56 AND CURRENT_DATE ) 
  OR (D.SNAPSHOT_TYPE = 'WEEK_END' AND FORECAST_FACT.SNAPSHOT_DATE BETWEEN CURRENT_DATE - 56 AND CURRENT_DATE )
  
  AND FORECAST_FACT.CALENDAR_DATE >= DATEADD(WEEK, -8, CURRENT_DATE)
  AND FORECAST_FACT.CALENDAR_DATE < DATEADD(WEEK, 8, CURRENT_DATE) 
  
  UNION ALL
  
/* UNION 2 : ACTUALS */
 
 SELECT
  SLSORDER_FACT.SOURCE_SYSTEM,
  SLSORDER_FACT.SALES_ORDER_COMPANY AS COMPANY_CODE,
  SLSORDER_FACT.SOURCE_ITEM_IDENTIFIER,
  'ACTUALS' AS SOURCE_CONTENT_FILTER,
  SLSORDER_FACT.ITEM_GUID,
  SLSORDER_FACT.SHIP_SOURCE_CUSTOMER_CODE,
  SLSORDER_FACT.SHIP_CUSTOMER_ADDRESS_GUID,
  SLSORDER_FACT.BILL_SOURCE_CUSTOMER_CODE,
  NULL AS PLAN_SOURCE_CUSTOMER_CODE,
  COALESCE (TO_DATE(LINE_ACTUAL_SHIP_DATE), TO_DATE(LINE_INVOICE_DATE), TO_DATE(LINE_GL_DATE), TO_DATE(LINE_CANCELLED_DATE),TO_DATE(LINE_REQUESTED_DATE), TO_DATE(LINE_ORDERED_DATE)) AS CALENDAR_DATE,
  SLSORDER_FACT.LINE_ACTUAL_SHIP_DATE,
  SLSORDER_FACT.LINE_SCH_PICK_UP_DATE, 
  SLSORDER_FACT.LINE_STATUS_CODE,
  SLSORDER_FACT.LINE_STATUS_DESC,
  SLSORDER_FACT.COST_CENTRE,
  NULL AS SNAPSHOT_FORECAST_DATE,
  NULL AS OVERRIDE_FLAG,
  NULL AS ISONPROMO_SI,
  NULL AS ISONPROMO_SO,
  0 AS FCF_TOT_VOL_KG,
  0 AS FCF_TOT_VOL_CA,
  0 AS FCF_TOT_VOL_UL,
  0 AS FCF_BASE_VOL_KG,
  0 AS FCF_BASE_VOL_CA,
  0 AS FCF_BASE_VOL_UL,
  0 AS FCF_PROMO_VOL_KG,
  0 AS FCF_PROMO_VOL_CA,
  0 AS FCF_PROMO_VOL_UL,
  0 AS FCF_OVER_VOL_KG,
  0 AS FCF_OVER_VOL_CA,
  0 AS FCF_OVER_VOL_UL,
  0 AS FCF_TOT_ORIG_VOL_KG,
  0 AS FCF_TOT_ORIG_VOL_CA,
  0 AS FCF_TOT_ORIG_VOL_UL,
  SLSORDER_FACT.ORDERED_CA_QUANTITY,
  SLSORDER_FACT.ORDERED_KG_QUANTITY,
  SLSORDER_FACT.ORDERED_UL_QUANTITY, 
  SLSORDER_FACT.SHIPPED_UL_QUANTITY, 
  SLSORDER_FACT.SHIPPED_CA_QUANTITY, 
  SLSORDER_FACT.SHIPPED_KG_QUANTITY,
  NULL AS FROZEN_FORECAST,
  NULL AS FROZEN_FORECAST_DELINEATION_DATE,
  NULL AS BUDGET_AMOUNT,
  NULL AS BUDGET_BOUGHTIN_AMT,
  NULL AS BUDGET_CA_QUANTITY,
  NULL AS BUDGET_COPACK_AMT,
  NULL AS BUDGET_ING_AMT	,
  NULL AS BUDGET_KG_QUANTITY,
  NULL AS BUDGET_LBR_AMT,
  NULL AS BUDGET_OTH_AMT,
  NULL AS BUDGET_PERMD_BK_MRG,
  NULL AS BUDGET_PERMD_CSH_DISC,
  NULL AS BUDGET_PERMD_EDLP ,
  NULL AS BUDGET_PERMD_RNG_SPT,
  NULL AS BUDGET_PERMD_RSA_INCT,
  NULL AS BUDGET_PKG_AMT,
  NULL AS BUDGET_TRADE_AG_CST,
  NULL AS BUDGET_TRADE_AVP,
  NULL AS BUDGET_TRADE_CUST_MKT ,
  NULL AS BUDGET_TRADE_ISA,
  NULL AS BUDGET_TRADE_OTHER,
  NULL AS BUDGET_TRADE_PROMO,
  NULL AS BUDGET_UL_QUANTITY,
  NULL AS BUDGET_QTY_CA,
 (CASE WHEN PRM.CUSTOMER IS NULL THEN '0' ELSE '1' END) AS ISONPROMO_ACT,
  NULL AS BUDGET_WEEK,
  NULL AS ISONPROMO_FCST
  FROM cte_sls_wtx_slsorder_fact SLSORDER_FACT

  LEFT JOIN cte_customer_Ext CUST_EXT
      ON --SLSORDER_FACT.SOURCE_SYSTEM = CUST_EXT.SOURCE_SYSTEM
       SLSORDER_FACT.SHIP_CUSTOMER_ADDRESS_GUID = CUST_EXT.CUSTOMER_ADDRESS_NUMBER_GUID 
    --  AND SLSORDER_FACT.SALES_ORDER_COMPANY = CUST_EXT.COMPANY_CODE
	  
  
 LEFT JOIN cte_v_sls_wtx_onpromo PRM
  on PRM.customer = CUST_EXT.TRADE_TYPE_CODE
  and PRM.source_item_identifier = SLSORDER_FACT.SOURCE_ITEM_IDENTIFIER
  and PRM.date = DATEADD('DAY', -1, DATE_TRUNC('WEEK', DATEADD('DAY', 1, COALESCE (TO_DATE(LINE_ACTUAL_SHIP_DATE), TO_DATE(LINE_INVOICE_DATE),TO_DATE(LINE_GL_DATE), TO_DATE(LINE_CANCELLED_DATE), TO_DATE(LINE_REQUESTED_DATE), TO_DATE(LINE_ORDERED_DATE))))) 
  //want to join on every day in the week that a promotion is running.  Adjusted the week to Sunday to align weeks.
     
   WHERE  COALESCE (TO_DATE(LINE_ACTUAL_SHIP_DATE), TO_DATE(LINE_INVOICE_DATE), TO_DATE(LINE_GL_DATE), TO_DATE(LINE_CANCELLED_DATE), TO_DATE(LINE_REQUESTED_DATE), TO_DATE(LINE_ORDERED_DATE)) >= DATEADD(WEEK, -8, CURRENT_DATE)
   AND COALESCE (TO_DATE(LINE_ACTUAL_SHIP_DATE), TO_DATE(LINE_INVOICE_DATE), TO_DATE(LINE_GL_DATE), TO_DATE(LINE_CANCELLED_DATE), TO_DATE(LINE_REQUESTED_DATE), TO_DATE(LINE_ORDERED_DATE)) < DATEADD(WEEK, 8, CURRENT_DATE)
   AND TRIM(UPPER(SLSORDER_FACT.SALES_ORDER_COMPANY)) in {{env_var("DBT_COMPANY_FILTER")}} 
 AND NVL(TRIM(SLSORDER_FACT.COST_CENTRE),0) <> '6700'   --Excludes Samples
   
  UNION ALL
/* UNION 3 : BUDGET */ 

SELECT
  FORECAST_FACT.SOURCE_SYSTEM,
  NULL AS COMPANY_CODE,
  FORECAST_FACT.SOURCE_ITEM_IDENTIFIER,
  'BUDGET' AS SOURCE_CONTENT_FILTER,
  FORECAST_FACT.ITEM_GUID,
  NULL AS SHIP_SOURCE_CUSTOMER_CODE,
  NULL AS SHIP_CUSTOMER_ADDRESS_GUID,
  NULL AS BILL_SOURCE_CUSTOMER_CODE,
  FORECAST_FACT.PLAN_SOURCE_CUSTOMER_CODE,
  FORECAST_FACT.CALENDAR_DATE,
  NULL AS LINE_ACTUAL_SHIP_DATE,
  NULL AS LINE_SCH_PICK_UP_DATE, 
  NULL AS LINE_STATUS_CODE,
  NULL AS LINE_STATUS_DESC,
  NULL AS COST_CENTRE,
  NULL AS SNAPSHOT_FORECAST_DATE,
  '0' AS OVERRIDE_FLAG,
  FORECAST_FACT.ISONPROMO_SI,
  FORECAST_FACT.ISONPROMO_SO,
  FORECAST_FACT.FCF_TOT_VOL_KG,
  FORECAST_FACT.FCF_TOT_VOL_CA,
  FORECAST_FACT.FCF_TOT_VOL_UL,
  FORECAST_FACT.FCF_BASE_VOL_KG,
  FORECAST_FACT.FCF_BASE_VOL_CA,
  FORECAST_FACT.FCF_BASE_VOL_UL,
  FORECAST_FACT.FCF_PROMO_VOL_KG,
  FORECAST_FACT.FCF_PROMO_VOL_CA,
  FORECAST_FACT.FCF_PROMO_VOL_UL,
  FORECAST_FACT.FCF_OVER_VOL_KG,
  FORECAST_FACT.FCF_OVER_VOL_CA,
  FORECAST_FACT.FCF_OVER_VOL_UL,
  FORECAST_FACT.FCF_TOT_VOL_KG AS FCF_TOT_ORIG_VOL_KG,
  FORECAST_FACT.FCF_TOT_VOL_CA AS FCF_TOT_ORIG_VOL_CA,
  FORECAST_FACT.FCF_TOT_VOL_UL AS FCF_TOT_ORIG_VOL_UL,  
  0 AS ORDERED_CA_QUANTITY,
  0 AS ORDERED_KG_QUANTITY,
  0 AS ORDERED_UL_QUANTITY,
  0 AS SHIPPED_UL_QUANTITY, 
  0 AS SHIPPED_CA_QUANTITY,  
  0 AS SHIPPED_KG_QUANTITY,
  FORECAST_FACT.FROZEN_FORECAST AS FROZEN_FORECAST,
  SCEN.DELINEATION_DATE AS FROZEN_FORECAST_DELINEATION_DATE,
  NULL AS BUDGET_AMOUNT,
  NULL AS BUDGET_BOUGHTIN_AMT,
  NULL AS BUDGET_CA_QUANTITY,
  NULL AS BUDGET_COPACK_AMT,
  NULL AS BUDGET_ING_AMT	,
  NULL AS BUDGET_KG_QUANTITY,
  NULL AS BUDGET_LBR_AMT,
  NULL AS BUDGET_OTH_AMT,
  NULL AS BUDGET_PERMD_BK_MRG,
  NULL AS BUDGET_PERMD_CSH_DISC,
  NULL AS BUDGET_PERMD_EDLP ,
  NULL AS BUDGET_PERMD_RNG_SPT,
  NULL AS BUDGET_PERMD_RSA_INCT,
  NULL AS BUDGET_PKG_AMT,
  NULL AS BUDGET_TRADE_AG_CST,
  NULL AS BUDGET_TRADE_AVP,
  NULL AS BUDGET_TRADE_CUST_MKT ,
  NULL AS BUDGET_TRADE_ISA,
  NULL AS BUDGET_TRADE_OTHER,
  NULL AS BUDGET_TRADE_PROMO,
  NULL AS BUDGET_UL_QUANTITY,
  NULL AS BUDGET_QTY_CA,
  NULL AS ISONPROMO_ACT,
  NULL AS BUDGET_WEEK,
  '0' AS ISONPROMO_FCST
  FROM cte_sls_wtx_budget_fact FORECAST_FACT
---Start Budget Scenario Metadata-----------------------------------------------------------------
INNER JOIN (SELECT * FROM cte_sls_wtx_budget_scen_xref WHERE CURRENT_VERSION_FLAG='1') SCEN
	ON UPPER(TRIM(SCEN.FROZEN_FORECAST)) = UPPER(TRIM(FORECAST_FACT.FROZEN_FORECAST))
---End Budget Scenario Metadata-----------------------------------------------------------------

WHERE FORECAST_FACT.CALENDAR_DATE >= DATEADD(WEEK, -8, CURRENT_DATE)
AND FORECAST_FACT.CALENDAR_DATE < DATEADD(WEEK, 8, CURRENT_DATE)
  
  ) FACT

  LEFT JOIN cte_DIM_DATE DT
  ON FACT.CALENDAR_DATE = DT.CALENDAR_DATE
    
  LEFT JOIN cte_planning_date_oc DTP
  ON FACT.SOURCE_SYSTEM = DTP.SOURCE_SYSTEM
  AND FACT.CALENDAR_DATE = DTP.CALENDAR_DATE
      
  LEFT JOIN (SELECT SOURCE_SYSTEM, ITEM_GUID, MAX(ITEM_TYPE) AS ITEM_TYPE, MAX(BRANDING_DESC) AS BRANDING_DESC, MAX(PRODUCT_CLASS_DESC) AS PRODUCT_CLASS_DESC, MAX(SUB_PRODUCT_DESC) AS SUB_PRODUCT_DESC
  , MAX(STRATEGIC_DESC) AS STRATEGIC_DESC, MAX(POWER_BRAND_DESC) AS POWER_BRAND_DESC, MAX(MANUFACTURING_GROUP_DESC) AS MANUFACTURING_GROUP_DESC
  , MAX(CATEGORY_DESC) AS CATEGORY_DESC, MAX(PACK_SIZE_DESC) AS PACK_SIZE_DESC, MAX(SUB_CATEGORY_DESC) AS SUB_CATEGORY_DESC
  , MAX(CONSUMER_UNITS_IN_TRADE_UNITS) AS CONSUMER_UNITS_IN_TRADE_UNITS, MAX(PROMO_TYPE_DESC) AS PROMO_TYPE_DESC, MAX(CONSUMER_UNITS) AS CONSUMER_UNITS, MAX(DESCRIPTION) AS DESCRIPTION
  FROM cte_item_ext 
  GROUP BY SOURCE_SYSTEM, ITEM_GUID) ITM_EXT
  ON FACT.SOURCE_SYSTEM = ITM_EXT.SOURCE_SYSTEM
  AND FACT.ITEM_GUID = ITM_EXT.ITEM_GUID
  
  LEFT JOIN cte_customer_Ext CUST_EXT
      ON FACT.SOURCE_SYSTEM = CUST_EXT.SOURCE_SYSTEM
      AND FACT.SHIP_CUSTOMER_ADDRESS_GUID = CUST_EXT.CUSTOMER_ADDRESS_NUMBER_GUID 
      AND FACT.COMPANY_CODE = CUST_EXT.COMPANY_CODE
 LEFT JOIN cte_v_wtx_cust_planning PLAN
    ON TRIM(FACT.PLAN_SOURCE_CUSTOMER_CODE) = TRIM(PLAN.TRADE_TYPE_CODE)
    and fact.company_code=plan.company_code 
  
  GROUP BY 
  FACT.SOURCE_SYSTEM,
  FACT.COMPANY_CODE,
  SOURCE_ITEM_IDENTIFIER,
  SOURCE_CONTENT_FILTER,
  SHIP_SOURCE_CUSTOMER_CODE,
  BILL_SOURCE_CUSTOMER_CODE,
  COALESCE(FACT.PLAN_SOURCE_CUSTOMER_CODE, CUST_EXT.TRADE_TYPE_CODE),
  COALESCE(CUST_EXT.MARKET_DESC, PLAN.MARKET),
  COALESCE(CUST_EXT.SUB_MARKET_DESC, PLAN.SUB_MARKET),
  COALESCE(CUST_EXT.TRADE_CLASS_DESC, PLAN.TRADE_CLASS),
  COALESCE(CUST_EXT.TRADE_GROUP_DESC, PLAN.TRADE_GROUP),
  COALESCE(CUST_EXT.TRADE_TYPE_DESC, PLAN.TRADE_TYPE),
  COALESCE(CUST_EXT.TRADE_SECTOR_DESC, PLAN.TRADE_SECTOR_DESC),
  FACT.CALENDAR_DATE,
  LINE_ACTUAL_SHIP_DATE,
  LINE_SCH_PICK_UP_DATE, 
  LINE_STATUS_CODE,
  LINE_STATUS_DESC,
  COST_CENTRE,
  SNAPSHOT_FORECAST_DATE,
  OVERRIDE_FLAG,
  ISONPROMO_SI,
  ISONPROMO_SO,
  ITM_EXT.DESCRIPTION,
  ITM_EXT.ITEM_TYPE, 
  ITM_EXT.BRANDING_DESC, 
  ITM_EXT.PRODUCT_CLASS_DESC, 
  ITM_EXT.SUB_PRODUCT_DESC, 
  ITM_EXT.STRATEGIC_DESC, 
  ITM_EXT.POWER_BRAND_DESC, 
  ITM_EXT.MANUFACTURING_GROUP_DESC, 
  ITM_EXT.CATEGORY_DESC, 
  ITM_EXT.PACK_SIZE_DESC, 
  ITM_EXT.SUB_CATEGORY_DESC, 
  ITM_EXT.CONSUMER_UNITS_IN_TRADE_UNITS,
  ITM_EXT.CONSUMER_UNITS,
    PROMO_TYPE_DESC,
  FROZEN_FORECAST,  -- Updated for Budget 
  FROZEN_FORECAST_DELINEATION_DATE,
  BUDGET_WEEK,  -- Updated for Budget 
  ISONPROMO_ACT, DT.CALENDAR_YEAR_WEEK_NO,
  ISONPROMO_FCST
)
select 
    SOURCE_SYSTEM,
	SOURCE_ITEM_IDENTIFIER,
	SOURCE_CONTENT_FILTER,
	SHIP_SOURCE_CUSTOMER_CODE,
	BILL_SOURCE_CUSTOMER_CODE,
	PLAN_SOURCE_CUSTOMER_CODE,
	MARKET_DESC,
	SUB_MARKET_DESC,
	TRADE_CLASS_DESC,
	TRADE_GROUP_DESC,
	TRADE_TYPE_DESC,
	TRADE_SECTOR_DESC,
	CALENDAR_DATE,
	LINE_ACTUAL_SHIP_DATE,
	LINE_SCH_PICK_UP_DATE,
	LINE_STATUS_CODE,
	LINE_STATUS_DESC,
	COST_CENTRE,
	SNAPSHOT_FORECAST_DATE,
	OVERRIDE_FLAG,
	ISONPROMO_SI,
	ISONPROMO_SO,
	ITEM_DESCRIPTION,
	ITEM_TYPE,
	BRANDING_DESC,
	PRODUCT_CLASS_DESC,
	SUB_PRODUCT_DESC,
	STRATEGIC_DESC,
	POWER_BRAND_DESC,
	MANUFACTURING_GROUP_DESC,
	CATEGORY_DESC,
	PACK_SIZE_DESC,
	SUB_CATEGORY_DESC,
	CONSUMER_UNITS_IN_TRADE_UNITS,
	CONSUMER_UNITS,
	FCF_TOT_VOL_KG,
	FCF_TOT_VOL_CA,
	FCF_TOT_VOL_UL,
	FCF_TOT_VOL_PK,
	FCF_TOT_VOL_CU,
	FCF_BASE_VOL_KG,
	FCF_BASE_VOL_CA,
	FCF_BASE_VOL_UL,
	FCF_BASE_VOL_PK,
	FCF_BASE_VOL_CU,
	FCF_PROMO_VOL_KG,
	FCF_PROMO_VOL_CA,
	FCF_PROMO_VOL_UL,
	FCF_PROMO_VOL_PK,
	FCF_PROMO_VOL_CU,
	FCF_OVER_VOL_KG,
	FCF_OVER_VOL_CA,
	FCF_OVER_VOL_UL,
	FCF_OVER_VOL_PK,
	FCF_OVER_VOL_CU,
	FCF_TOT_ORIG_VOL_KG,
	FCF_TOT_ORIG_VOL_CA,
	FCF_TOT_ORIG_VOL_UL,
	FCF_TOT_ORIG_VOL_PK,
	FCF_TOT_ORIG_VOL_CU,
	ORDERED_CA_QUANTITY,
	ORDERED_KG_QUANTITY,
	ORDERED_UL_QUANTITY,
	ORDERED_PK_QUANTITY,
	ORDERED_CU_QUANTITY,
	SHIPPED_UL_QUANTITY,
	SHIPPED_PK_QUANTITY,
	SHIPPED_CU_QUANTITY,
	SHIPPED_CA_QUANTITY,
	SHIPPED_KG_QUANTITY,
	FROZEN_FORECAST,
	FROZEN_FORECAST_DELINEATION_DATE,
	BUDGET_AMOUNT,
	BUDGET_BOUGHTIN_AMT,
	BUDGET_CA_QUANTITY,
	BUDGET_COPACK_AMT,
	BUDGET_ING_AMT,
	BUDGET_KG_QUANTITY,
	BUDGET_LBR_AMT,
	BUDGET_OTH_AMT,
	BUDGET_PERMD_BK_MRG,
	BUDGET_PERMD_CSH_DISC,
	BUDGET_PERMD_EDLP,
	BUDGET_PERMD_RNG_SPT,
	BUDGET_PERMD_RSA_INCT,
	BUDGET_PKG_AMT,
	BUDGET_TRADE_AG_CST,
	BUDGET_TRADE_AVP,
	BUDGET_TRADE_CUST_MKT,
	BUDGET_TRADE_ISA,
	BUDGET_TRADE_OTHER,
	BUDGET_TRADE_PROMO,
	BUDGET_UL_QUANTITY,
	BUDGET_CU_QUANTITY,
	BUDGET_PK_QUANTITY,
	ISONPROMO_ACT,
	BUDGET_WEEK,
	ISONPROMO_FCST
from cte_final


