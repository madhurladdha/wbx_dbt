with A as(
    select 
        itemid
        ,product
        ,altitemid
        ,taxpackagingqty
        ,dataareaid
        ,pdsshelflife
        ,netweight
        ,itembuyergroupid
        ,case when REGEXP_LIKE(trim(primaryvendorid), '[a-zA-Z].*') then NULL  else primaryvendorid end as primaryvendorid 
    from {{ref('src_inventtable')}} 
),
--18-01-2024--Added regex expression to make primaryvendorid as null when it has varchar fields.
INV as(
    SELECT * from {{ref('src_inventtrans')}}
),

ID as (
select * from {{ref('src_inventdim')}}
),

SI as (
   select * from {{ref('src_inventsite')}} 
),

SALESTABLE as (
select * from {{ref('src_salestable')}}
),

SALESLINE as (
    select * from {{ref('src_salesline')}}
),

PURCH_SETUP as (
    SELECT DATAAREAID, ITEMID, MAX(HIGHESTQTY) AS HIGHESTQTY, MAX(LOWESTQTY) AS LOWESTQTY, MAX(LEADTIME) AS LEADTIME, MAX(STOPPED) AS STOPPED  
    FROM {{ref('src_inventitempurchsetup')}} GROUP BY DATAAREAID, ITEMID
),

SALES_SETUP as(
    SELECT DATAAREAID, ITEMID, MAX(HIGHESTQTY) AS HIGHESTQTY, MAX(LOWESTQTY) AS LOWESTQTY, MAX(LEADTIME) AS LEADTIME, MAX(STOPPED) AS STOPPED
     FROM {{ref('src_inventitemsalessetup')}} GROUP BY DATAAREAID, ITEMID
),

ERPT as
(
    select * from {{ref('src_ecoresproducttranslation')}}
),

IIGI as (
    select * from {{ref('src_inventitemgroupitem')}}
),

PURCH_ITM as 
(
    select * from {{ref('src_inventtablemodule')}} WHERE MODULETYPE = 1
),

SALES_ITM as 
(
    select * from {{ref('src_inventtablemodule')}} WHERE MODULETYPE = 2
),

PT as (
    SELECT * from {{ref('src_prodtable')}}
),

PR as(
    SELECT * from {{ref('src_prodroute')}}
),

DP as 
(
SELECT DISPLAYVALUE,DALVV.DIMENSIONATTRIBUTEVALUESET FROM {{ref('src_dimensionattributevaluesitemv')}} DALVV
INNER JOIN {{ref('src_dimensionattribute')}} DA ON DALVV.DIMENSIONATTRIBUTE = DA.RECID WHERE DA.NAME = 'Plant'
),

norm as(
    SELECT SOURCE_VALUE, NORMALIZED_VALUE FROM  {{ref('src_ref_normalization_xref')}} WHERE SOURCE_SYSTEM = 'WEETABIX' AND LOOKUP_CATEGORY = 'ITEM' AND REFERENCE_FIELD = 'ITEM_TYPE'
),

PRC as (
SELECT source_system     AS source_system,
       source_item_identifier AS source_item_identifier,
       ITEM_TYPE              AS ITEM_TYPE,
       highlevel_category_code  AS highlevel_category_code,
       midlevel_category_code   AS midlevel_category_code,
       lowlevel_category_code   AS lowlevel_category_code,
       NULL           AS  master_planning_family_code,
       NULL           AS board_traded_flag,
       NULL           AS Risk_flag,
       MASTER_REPORTING_CATEGORY,
       ALTERNATE_REPORTING_CATEGORY,
       item_category_1,
        item_category_2,
        item_category_3,
        item_category_4,
        item_category_5,
        item_category_6,
        item_category_7,
        item_category_8,
        item_category_9,
        item_category_10,
       BUYER_NAME
       FROM {{ref('src_itm_procurement_category_ext_stg')}}  WHERE SOURCE_SYSTEM = 'WEETABIX'
),

TRANSACTION_COMBOS as
(
SELECT DISTINCT INV.ITEMID, ID.INVENTLOCATIONID,INV.DATAAREAID 
FROM   INV
INNER JOIN  ID ON INV.INVENTDIMID = ID.INVENTDIMID WHERE TRIM (ID.INVENTLOCATIONID) IS NOT NULL
UNION 
SELECT  DISTINCT  SALESLINE.ITEMID,SALESTABLE.INVENTLOCATIONID ,SALESLINE.DATAAREAID 
FROM SALESLINE 
INNER JOIN SALESTABLE on SALESLINE.SALESID = SALESTABLE.SALESID WHERE TRIM (SALESTABLE.INVENTLOCATIONID) IS NOT NULL
),

B as 
(
SELECT DISTINCT TO_CHAR(ITEMID) as itemid, TO_CHAR(DISPLAYVALUE) as displayvalue, PT.DATAAREAID
FROM  PT
INNER JOIN PR ON PT.PARTITION = PR.PARTITION  AND PT.PRODID = PR.PRODID AND PT.DATAAREAID = PR.DATAAREAID
INNER JOIN DP ON PT.DEFAULTDIMENSION =DP.DIMENSIONATTRIBUTEVALUESET
),

IT1 as
(
SELECT DISTINCT 
A.ITEMID,
TRANSACTION_COMBOS.INVENTLOCATIONID,
A.PRODUCT,
A.ALTITEMID,
A.TAXPACKAGINGQTY,
A.DATAAREAID,
A.PDSSHELFLIFE,
A.NETWEIGHT,
PURCH_SETUP.HIGHESTQTY AS PURCH_HIGHESTQTY,
PURCH_SETUP.LOWESTQTY AS PURCH_LOWESTQTY,
PURCH_SETUP.LEADTIME AS PURCH_LEADTIME,
PURCH_SETUP.STOPPED AS PURCH_STOPPED,
SALES_SETUP.HIGHESTQTY AS SALES_HIGHESTQTY,
SALES_SETUP.LOWESTQTY AS SALES_LOWESTQTY,
SALES_SETUP.LEADTIME AS SALES_LEADTIME,
SALES_SETUP.STOPPED AS SALES_STOPPED,
A.ITEMBUYERGROUPID,
A.PRIMARYVENDORID               
FROM  A
INNER JOIN  TRANSACTION_COMBOS ON A.ITEMID = TRANSACTION_COMBOS.ITEMID AND UPPER(TRIM(A.DATAAREAID))=UPPER(TRIM(TRANSACTION_COMBOS.DATAAREAID))
LEFT JOIN  PURCH_SETUP ON A.ITEMID = PURCH_SETUP.ITEMID AND A.DATAAREAID = PURCH_SETUP.DATAAREAID
LEFT JOIN SALES_SETUP ON A.ITEMID = SALES_SETUP.ITEMID AND A.DATAAREAID = SALES_SETUP.DATAAREAID
),

IT2 as(
SELECT DISTINCT A.ITEMID,
                            b.DISPLAYVALUE,
                            A.PRODUCT,
                            A.ALTITEMID,
                            A.TAXPACKAGINGQTY,
                            A.DATAAREAID,
                            A.PDSSHELFLIFE,
                            A.NETWEIGHT,
                            PURCH_SETUP.HIGHESTQTY AS PURCH_HIGHESTQTY,
                            PURCH_SETUP.LOWESTQTY AS PURCH_LOWESTQTY,
                            PURCH_SETUP.LEADTIME AS PURCH_LEADTIME,
                            PURCH_SETUP.STOPPED AS PURCH_STOPPED,
                            SALES_SETUP.HIGHESTQTY AS SALES_HIGHESTQTY,
                            SALES_SETUP.LOWESTQTY AS SALES_LOWESTQTY,
                            SALES_SETUP.LEADTIME AS SALES_LEADTIME,
                            SALES_SETUP.STOPPED AS SALES_STOPPED,
                            A.ITEMBUYERGROUPID,
                            A.PRIMARYVENDORID
FROM   A
INNER JOIN  B ON TO_CHAR(A.ITEMID) = TO_CHAR(B.ITEMID)  
AND UPPER (TRIM (A.DATAAREAID))=UPPER (TRIM (B.DATAAREAID))
LEFT JOIN  PURCH_SETUP ON A.ITEMID = PURCH_SETUP.ITEMID AND A.DATAAREAID = PURCH_SETUP.DATAAREAID
LEFT JOIN SALES_SETUP ON A.ITEMID = SALES_SETUP.ITEMID AND A.DATAAREAID = SALES_SETUP.DATAAREAID
),

UNION_PART1 as
(
SELECT 
'{{env_var("DBT_SOURCE_SYSTEM")}}' AS SOURCE_SYSTEM,
CAST(IT1.ITEMID AS VARCHAR(255)) AS SOURCE_ITEM_IDENTIFIER,
           UPPER (TRIM (TO_CHAR (IT1.INVENTLOCATIONID))) AS BUSINESS_UNIT_CODE,
           CAST (IT1.ITEMID AS VARCHAR2 (60))  AS CASE_ITEM_NUMBER,
           IT1.PRODUCT AS ALTERNATE_ITEM_NUMBER,
           SUBSTRING(TRIM (ERPT.NAME),1,60) AS DESCRIPTION,
           TRUNC(IT1.TAXPACKAGINGQTY) AS PACK_SIZE_DESC,
           SUBSTRING(REPLACE (REPLACE (TRIM (ERPT.DESCRIPTION), CHR (13), ''), CHR (10), ''),1,60) AS SHORT_DESCRIPTION,
           UPPER (TRIM (IT1.DATAAREAID)) AS DIVISION,                       --- This will get normalized
           IT1.PDSSHELFLIFE AS SHELF_LIFE_DAYS,
           CASE WHEN IIGI.ITEMGROUPID = 'OBSOLETE' THEN 'OBSOLETE' ELSE 'ACTIVE' END AS STOCK_TYPE,
           CASE WHEN IIGI.ITEMGROUPID = 'OBSOLETE' THEN 'OBSOLETE' ELSE 'ACTIVE' END AS STOCK_DESC,
           CASE WHEN TRY_TO_NUMBER(IT1.ITEMID) IS NOT NULL THEN 'FINGOODS' ELSE NULLIF(UPPER(TRIM(IIGI.ITEMGROUPID)), '-') END AS ITEM_TYPE,--HJ 23 July 2020,Ticket#8176: Adjusted logic to better populate the Item Type 
		   NULLIF(UPPER(TRIM(IIGI.ITEMGROUPID)), '-') AS ITEM_CLASS,--HJ 23 July 2020,Ticket#8176:New Field
		   ---If the Item Type will ultimately be an FG, then use the Sales UOM, otherwise use the Purchasing.
           CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN UPPER(TRIM(SALES_ITM.UNITID)) ELSE UPPER(TRIM(PURCH_ITM.UNITID)) END AS PRIMARY_UOM,
           CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' AND UPPER(TRIM(SALES_ITM.UNITID)) = 'CASE' THEN TRUNC(IT1.NETWEIGHT,2) 
		        WHEN UPPER(TRIM(PURCH_ITM.UNITID)) = 'CASE' THEN TRUNC(IT1.NETWEIGHT,2) ELSE ROUND(0,2) END AS CASE_GROSS_WEIGHT,
           CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' AND UPPER(TRIM(SALES_ITM.UNITID)) = 'CASE' THEN TRUNC(IT1.NETWEIGHT,2) 
		        WHEN UPPER(TRIM(PURCH_ITM.UNITID)) = 'CASE' THEN TRUNC(IT1.NETWEIGHT,2) ELSE ROUND(0,2) END AS CASE_NET_WEIGHT,
           CASE WHEN IIGI.ITEMGROUPID = 'OBSOLETE' THEN 'Y' ELSE 'N' END AS OBSOLETE_FLAG,
           UPPER (TRIM (IT1.DATAAREAID)) AS DIVISION_C0DE, --- This will get normalized ,
           NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(IT1.SALES_HIGHESTQTY) ELSE TRUNC(IT1.PURCH_HIGHESTQTY) END, TRUNC(0)) AS MAX_REORDER_QUANTITY,
           NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(IT1.SALES_LOWESTQTY) ELSE TRUNC(IT1.PURCH_LOWESTQTY) END, TRUNC(0)) AS MIN_REORDER_QUANTITY,
           NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(IT1.SALES_LEADTIME) ELSE TRUNC(IT1.PURCH_LEADTIME) END, TRUNC(0)) AS LEAD_TIME,
           NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(IT1.SALES_STOPPED) ELSE TRUNC(IT1.PURCH_STOPPED) END, TRUNC(0)) AS STOPPED,
           IT1.ITEMBUYERGROUPID AS BUYER_GROUP,
           IT1.PRIMARYVENDORID AS SUPPLIER_CODE,
		     PRC.highlevel_category_code as highlevel_category_code,
			   PRC.midlevel_category_code as midlevel_category_code,
			   PRC.lowlevel_category_code as lowlevel_category_code,
			   PRC.MASTER_REPORTING_CATEGORY as MASTER_REPORTING_CATEGORY,
			   PRC.ALTERNATE_REPORTING_CATEGORY as ALTERNATE_REPORTING_CATEGORY,
               PRC.item_category_1,
               PRC.item_category_2,
               PRC.item_category_3,
               PRC.item_category_4,
               PRC.item_category_5,
               PRC.item_category_6,
               PRC.item_category_7,
               PRC.item_category_8,
               PRC.item_category_9,
               PRC.item_category_10,
			   PRC.BUYER_NAME as BUYER_NAME
FROM IT1
INNER JOIN  ERPT ON IT1.PRODUCT = ERPT.PRODUCT
INNER JOIN  IIGI ON UPPER(TRIM(IT1.DATAAREAID)) = UPPER(TRIM(IIGI.ITEMDATAAREAID)) AND TO_CHAR(IT1.ITEMID) = TO_CHAR(IIGI.ITEMID)
---Specifically to get the UOM(s) for Purchasing items.  Determine later in the SELECT to use the Purchasing values or Sales values
LEFT JOIN PURCH_ITM ON UPPER(TRIM(IT1.DATAAREAID)) = UPPER(TRIM(PURCH_ITM.DATAAREAID)) AND TO_CHAR(IT1.ITEMID) = TO_CHAR(PURCH_ITM.ITEMID)
---Specifically to get the UOM(s) for Sales items.  Determine later in the SELECT to use the Purchasing values or Sales values
LEFT JOIN  SALES_ITM ON UPPER(TRIM(IT1.DATAAREAID)) = UPPER(TRIM(SALES_ITM.DATAAREAID)) AND TO_CHAR(IT1.ITEMID) = TO_CHAR(SALES_ITM.ITEMID)
LEFT JOIN  NORM ON NORM.SOURCE_VALUE = (CASE WHEN TRY_TO_NUMBER(IT1.ITEMID) IS NOT NULL THEN 'FINGOODS' ELSE NULLIF(UPPER(TRIM(IIGI.ITEMGROUPID)), '-') END)----HJ 23 July 2020,Ticket#8176: changed condition to lookup to  newly adjusted Item Type 
LEFT JOIN  PRC ON     CAST(IT1.ITEMID AS VARCHAR(255)) = UPPER (source_item_identifier)
),


UNION_PART2 as
(
SELECT '{{env_var("DBT_SOURCE_SYSTEM")}}' AS SOURCE_SYSTEM,
CAST(A.ITEMID AS VARCHAR(255)) AS SOURCE_ITEM_IDENTIFIER,
UPPER (TRIM (TO_CHAR (SI.SITEID))) AS BUSINESS_UNIT_CODE,
CAST (A.ITEMID AS VARCHAR2 (60)) AS CASE_ITEM_NUMBER,
A.PRODUCT AS ALTERNATE_ITEM_NUMBER,
SUBSTRING(TRIM (ERPT.NAME),1,60) AS DESCRIPTION,
TRUNC(A.TAXPACKAGINGQTY) AS PACK_SIZE_DESC,
SUBSTRING(REPLACE (REPLACE (TRIM (ERPT.DESCRIPTION), CHR (13), ''),CHR (10),''),1,60) AS SHORT_DESCRIPTION,
UPPER (TRIM (A.DATAAREAID)) AS DIVISION,                       --- This will get normalized
A.PDSSHELFLIFE AS SHELF_LIFE_DAYS,
CASE WHEN IIGI.ITEMGROUPID = 'OBSOLETE' THEN 'OBSOLETE' ELSE 'ACTIVE' END AS STOCK_TYPE,
CASE WHEN IIGI.ITEMGROUPID = 'OBSOLETE' THEN 'OBSOLETE' ELSE 'ACTIVE' END AS STOCK_DESC,
CASE WHEN TRY_TO_NUMBER(A.ITEMID) IS NOT NULL THEN 'FINGOODS' ELSE NULLIF(UPPER(TRIM(IIGI.ITEMGROUPID)), '-') END AS ITEM_TYPE,--HJ 23 July 2020,Ticket#8176: Adjusted logic to better populate the Item Type 
NULLIF(UPPER(TRIM(IIGI.ITEMGROUPID)), '-') AS ITEM_CLASS,
           	   ---If the Item Type will ultimately be an FG, then use the Sales UOM, otherwise use the Purchasing.
CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN UPPER(TRIM(SALES_ITM.UNITID)) ELSE UPPER(TRIM(PURCH_ITM.UNITID)) END AS PRIMARY_UOM,
CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' AND UPPER(TRIM(SALES_ITM.UNITID)) = 'CASE' THEN TRUNC(A.NETWEIGHT,2) 
WHEN UPPER(TRIM(PURCH_ITM.UNITID)) = 'CASE' THEN TRUNC(A.NETWEIGHT,2) ELSE ROUND(0,2) END AS CASE_GROSS_WEIGHT,
CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' AND UPPER(TRIM(SALES_ITM.UNITID)) = 'CASE' THEN TRUNC(A.NETWEIGHT,2) 
WHEN UPPER(TRIM(PURCH_ITM.UNITID)) = 'CASE' THEN TRUNC(A.NETWEIGHT,2) ELSE ROUND(0,2) END AS CASE_NET_WEIGHT,
CASE WHEN IIGI.ITEMGROUPID = 'OBSOLETE' THEN 'Y' ELSE 'N' END AS OBSOLETE_FLAG,
UPPER (TRIM (A.DATAAREAID)) AS DIVISION_C0DE  ,                 --- This will get normalized
NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(SALES_SETUP.HIGHESTQTY) ELSE TRUNC(PURCH_SETUP.HIGHESTQTY) END, TRUNC(0)) AS MAX_REORDER_QUANTITY,
NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(SALES_SETUP.LOWESTQTY) ELSE TRUNC(PURCH_SETUP.LOWESTQTY) END, TRUNC(0)) AS MIN_REORDER_QUANTITY,
NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(SALES_SETUP.LEADTIME) ELSE TRUNC(PURCH_SETUP.LEADTIME) END, TRUNC(0)) AS LEAD_TIME,
NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(SALES_SETUP.STOPPED) ELSE TRUNC(PURCH_SETUP.STOPPED) END, TRUNC(0)) AS STOPPED,
A.ITEMBUYERGROUPID AS BUYER_GROUP,
A.PRIMARYVENDORID AS SUPPLIER_CODE,
PRC.highlevel_category_code as highlevel_category_code,
PRC.midlevel_category_code as midlevel_category_code,
PRC.lowlevel_category_code as lowlevel_category_code,
PRC.MASTER_REPORTING_CATEGORY as MASTER_REPORTING_CATEGORY,
PRC.ALTERNATE_REPORTING_CATEGORY as ALTERNATE_REPORTING_CATEGORY,
PRC.item_category_1,
PRC.item_category_2,
PRC.item_category_3,
PRC.item_category_4,
PRC.item_category_5,
PRC.item_category_6,
PRC.item_category_7,
PRC.item_category_8,
PRC.item_category_9,
PRC.item_category_10,
PRC.BUYER_NAME as BUYER_NAME
FROM  A
INNER JOIN  SI ON UPPER (TRIM (A.DATAAREAID)) = UPPER (TRIM (SI.DATAAREAID))
INNER JOIN   ERPT ON A.PRODUCT = ERPT.PRODUCT
/* From inner join making this as left join to allow the newly created item to flow through */
LEFT JOIN  IIGI ON UPPER (TRIM (A.DATAAREAID)) =UPPER (TRIM (IIGI.ITEMDATAAREAID)) AND TO_CHAR(A.ITEMID) = TO_CHAR(IIGI.ITEMID)
LEFT JOIN  PURCH_SETUP ON A.ITEMID = PURCH_SETUP.ITEMID AND A.DATAAREAID = PURCH_SETUP.DATAAREAID
LEFT JOIN SALES_SETUP ON A.ITEMID = SALES_SETUP.ITEMID AND A.DATAAREAID = SALES_SETUP.DATAAREAID
---Specifically to get the UOM(s) for Purchasing items.  Determine later in the SELECT to use the Purchasing values or Sales values
LEFT JOIN PURCH_ITM ON UPPER(TRIM(A.DATAAREAID)) = UPPER(TRIM(PURCH_ITM.DATAAREAID)) AND TO_CHAR(A.ITEMID) = TO_CHAR(PURCH_ITM.ITEMID)
           ---Specifically to get the UOM(s) for Sales items.  Determine later in the SELECT to use the Purchasing values or Sales values
 LEFT JOIN SALES_ITM ON UPPER(TRIM(A.DATAAREAID)) = UPPER(TRIM(SALES_ITM.DATAAREAID)) AND TO_CHAR(A.ITEMID) = TO_CHAR(SALES_ITM.ITEMID)
LEFT JOIN  NORM ON NORM.SOURCE_VALUE = (CASE WHEN TRY_TO_NUMBER(A.ITEMID) IS NOT NULL THEN 'FINGOODS' ELSE NULLIF(UPPER(TRIM(IIGI.ITEMGROUPID)), '-') END)--HJ 23 July 2020,Ticket#8176: changed condition to use the newly adjusted Item Type 
LEFT JOIN PRC ON     CAST(A.ITEMID AS VARCHAR(255)) = UPPER (source_item_identifier)

),

UNION_PART3 as(
SELECT '{{env_var("DBT_SOURCE_SYSTEM")}}' AS SOURCE_SYSTEM,
CAST(IT2.ITEMID AS VARCHAR(255)) AS SOURCE_ITEM_IDENTIFIER,
UPPER (TRIM (TO_CHAR (IT2.DISPLAYVALUE))) AS BUSINESS_UNIT_CODE,
CAST (IT2.ITEMID AS VARCHAR2 (60)) AS CASE_ITEM_NUMBER,
IT2.PRODUCT AS ALTERNATE_ITEM_NUMBER,
           SUBSTRING(TRIM (ERPT.NAME),1,60)
               AS DESCRIPTION,
           --NVL (TRIM (ERPT.DESCRIPTION), TRIM (ERPT.NAME)) AS DESCRIPTION,  2018-1-5 Mike:DESCRIPTION should come from ERPT.NAME, trimmed
           TRUNC(IT2.TAXPACKAGINGQTY)
               AS PACK_SIZE_DESC,
           SUBSTRING(REPLACE (REPLACE (TRIM (ERPT.DESCRIPTION), CHR (13), ''),
                    CHR (10),
                    ''),1,60)
               AS SHORT_DESCRIPTION,
           --ERPT.NAME AS SHORT_DESCRIPTION, 2018-1-5 Mike: SHORT_DESCRIPTION should come from ERPT.DESCRIPTION, trimmed and see about removing any embedded carriage returns.
           UPPER (TRIM (IT2.DATAAREAID))
               AS DIVISION,                       --- This will get normalized
           IT2.PDSSHELFLIFE
               AS SHELF_LIFE_DAYS,
           CASE
               WHEN IIGI.ITEMGROUPID = 'OBSOLETE' THEN 'OBSOLETE'
               ELSE 'ACTIVE'
           END
               AS STOCK_TYPE,
           CASE
               WHEN IIGI.ITEMGROUPID = 'OBSOLETE' THEN 'OBSOLETE'
               ELSE 'ACTIVE'
           END
               AS STOCK_DESC,
           CASE WHEN TRY_TO_NUMBER(IT2.ITEMID) IS NOT NULL THEN 'FINGOODS' ELSE NULLIF(UPPER(TRIM(IIGI.ITEMGROUPID)), '-') END AS ITEM_TYPE,--HJ 23 July 2020,Ticket#8176: Adjusted logic to better populate the Item Type 
		   NULLIF(UPPER(TRIM(IIGI.ITEMGROUPID)), '-') AS ITEM_CLASS,--HJ 23 July 2020,Ticket#8176:New Field
           ---If the Item Type will ultimately be an FG, then use the Sales UOM, otherwise use the Purchasing.
           CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN UPPER(TRIM(SALES_ITM.UNITID)) ELSE UPPER(TRIM(PURCH_ITM.UNITID)) END AS PRIMARY_UOM,
           CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' AND UPPER(TRIM(SALES_ITM.UNITID)) = 'CASE' THEN TRUNC(IT2.NETWEIGHT,2) 
		        WHEN UPPER(TRIM(PURCH_ITM.UNITID)) = 'CASE' THEN TRUNC(IT2.NETWEIGHT,2) ELSE ROUND(0,2) END AS CASE_GROSS_WEIGHT,
           CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' AND UPPER(TRIM(SALES_ITM.UNITID)) = 'CASE' THEN TRUNC(IT2.NETWEIGHT,2) 
		        WHEN UPPER(TRIM(PURCH_ITM.UNITID)) = 'CASE' THEN TRUNC(IT2.NETWEIGHT,2) ELSE ROUND(0,2) END AS CASE_NET_WEIGHT,
           CASE WHEN IIGI.ITEMGROUPID = 'OBSOLETE' THEN 'Y' ELSE 'N' END
               AS OBSOLETE_FLAG,
           UPPER (TRIM (IT2.DATAAREAID))
               AS DIVISION_C0DE,                   --- This will get normalized,
           NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(IT2.SALES_HIGHESTQTY) ELSE TRUNC(IT2.PURCH_HIGHESTQTY) END, TRUNC(0)) AS MAX_REORDER_QUANTITY,
           NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(IT2.SALES_LOWESTQTY) ELSE TRUNC(IT2.PURCH_LOWESTQTY) END, TRUNC(0)) AS MIN_REORDER_QUANTITY,
           NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(IT2.SALES_LEADTIME) ELSE TRUNC(IT2.PURCH_LEADTIME) END, TRUNC(0)) AS LEAD_TIME,
           NVL(CASE WHEN NORM.NORMALIZED_VALUE = 'FINISHED GOOD' THEN TRUNC(IT2.SALES_STOPPED) ELSE TRUNC(IT2.PURCH_STOPPED) END, TRUNC(0)) AS STOPPED,
           IT2.ITEMBUYERGROUPID AS BUYER_GROUP,
           IT2.PRIMARYVENDORID
               AS SUPPLIER_CODE,
			   PRC.highlevel_category_code as highlevel_category_code,
			   PRC.midlevel_category_code as midlevel_category_code,
			   PRC.lowlevel_category_code as lowlevel_category_code,
			   PRC.MASTER_REPORTING_CATEGORY as MASTER_REPORTING_CATEGORY,
			   PRC.ALTERNATE_REPORTING_CATEGORY as ALTERNATE_REPORTING_CATEGORY,
               PRC.item_category_1,
               PRC.item_category_2,
               PRC.item_category_3,
               PRC.item_category_4,
               PRC.item_category_5,
               PRC.item_category_6,
               PRC.item_category_7,
               PRC.item_category_8,
               PRC.item_category_9,
               PRC.item_category_10,
			   PRC.BUYER_NAME as BUYER_NAME
      FROM IT2---this subselect gets the expected/available Item-Br combos from prodtable
INNER JOIN ERPT ON IT2.PRODUCT = ERPT.PRODUCT
INNER JOIN  IIGI ON UPPER (TRIM (IT2.DATAAREAID)) =UPPER (TRIM (IIGI.ITEMDATAAREAID)) AND TO_CHAR(IT2.ITEMID) = TO_CHAR(IIGI.ITEMID)
LEFT JOIN  PURCH_ITM ON UPPER(TRIM(IT2.DATAAREAID)) = UPPER(TRIM(PURCH_ITM.DATAAREAID)) AND TO_CHAR(IT2.ITEMID) = TO_CHAR(PURCH_ITM.ITEMID)
---Specifically to get the UOM(s) for Sales items.  Determine later in the SELECT to use the Purchasing values or Sales values
LEFT JOIN SALES_ITM ON UPPER(TRIM(IT2.DATAAREAID)) = UPPER(TRIM(SALES_ITM.DATAAREAID)) AND TO_CHAR(IT2.ITEMID) = TO_CHAR(SALES_ITM.ITEMID)
LEFT JOIN NORM ON NORM.SOURCE_VALUE = (CASE WHEN TRY_TO_NUMBER(IT2.ITEMID) IS NOT NULL THEN 'FINGOODS' ELSE NULLIF(UPPER(TRIM(IIGI.ITEMGROUPID)), '-') END)--HJ 23 July 2020,Ticket#8176: changed condition to lookup with newly adjusted item_type
LEFT JOIN PRC ON     CAST(IT2.ITEMID AS VARCHAR(255)) = UPPER (source_item_identifier)
),

final as(
    select * from UNION_PART1
    union
    select * from UNION_PART2
    union 
    select * from UNION_PART3
)

select * from final